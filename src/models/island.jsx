/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import {useFrame, useThree} from "@react-three/fiber";
import {a} from "@react-spring/three"

import islandScence from '../assets/3d/island.glb'

const Island = ({rotating,setRotating,setCurrentStage,...props}) => {
    const islandRef = useRef()
    const {nodes, materials} = useGLTF(islandScence);
    const {gl,viewport} = useThree();
    const lastX = useRef(0);
    // Use a ref for rotation speed
    const rotationSpeed = useRef(0);
    // Define a damping factor to control rotation damping
    const dampingFactor = 0.95;
    const handlepointerDown = (e) => {
        setRotating(true)
        const clientX = e.touches ? e.touches[0].clientX : e.clientX
        lastX.current = clientX


    }
    const handlepointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setRotating(false)

    }
    const handlepointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();
        if (rotating) {
            const clientX = e.touches ? e.touches[0].clientX : e.clientX
            const delta = (clientX - lastX.current) / viewport.width
            islandRef.current.rotation.y += delta * 0.03 * Math.PI
            lastX.current = clientX
            rotationSpeed.current = delta * 0.03 * Math.PI
        }
    }
    const handleKeyboardDown = (e) => {
        if (e.key === 'ArrowLeft') {
            if (!rotating) {
                setRotating(true)
            }
                islandRef.current.rotation.y += 0.03 * Math.PI
                rotationSpeed.current = 0.005

        } else if (e.key === 'ArrowRight') {
            if (!rotating) {
                setRotating(true)
            }
                islandRef.current.rotation.y -= 0.03 * Math.PI
                rotationSpeed.current = -0.005

        }
    }

    const handleKeyUp = (e) => {
        if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
            setRotating(false);
        }
    }
    useFrame(() =>{
        if(!rotating){
            rotationSpeed.current *= dampingFactor
            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }
            islandRef.current.rotation.y += rotationSpeed.current;
        }
        else{
            const rotation = islandRef.current.rotation.y;
            const normalizedRotation =
                ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            // Set the current stage based on the island's orientation
            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                    setCurrentStage(4);
                    break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(null);
            }
        }
    })

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlepointerDown)
        canvas.addEventListener('pointerup', handlepointerUp)
        canvas.addEventListener('pointermove', handlepointerMove)
        window.addEventListener('keyup',handleKeyUp)
        window.addEventListener('keydown',handleKeyboardDown)

        return () => {
            canvas.removeEventListener('pointerdown', handlepointerDown)
            canvas.removeEventListener('pointerup', handlepointerUp)
            canvas.removeEventListener('pointermove', handlepointerMove)
            window.removeEventListener('keydown',handleKeyboardDown)
            window.removeEventListener('keyup',handleKeyUp)
        }
    }, [gl, handlepointerDown, handlepointerMove, handlepointerUp])

    return (
        <a.group ref={islandRef}{...props} >
            <mesh
                geometry={nodes.polySurface944_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface945_tree1_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface946_tree2_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface947_tree1_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface948_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface949_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.pCube11_rocks1_0.geometry}
                material={materials.PaletteMaterial001}
            />
        </a.group>
    );
}

useGLTF.preload("/island.glb");

export default Island